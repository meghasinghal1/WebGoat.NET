name: WebGoat Test Api

on:
  push:
    branches: [ master ]
    
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      Offensive360SastApi_AccessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJJZCI6IjYyMDMwNGI1YjE3NTFhMmM4YjdkNGY3YSIsIlVzZXJuYW1lIjoiYWRtaW4gNToxMiBQTSIsInJvbGUiOiJFeHRlcm5hbCIsIkppcmFBdXRoZW50aWNhdGVkIjoiZmFsc2UiLCJuYmYiOjE2NjkwNTA3NzEsImV4cCI6MTY2OTY1NTU3MSwiaWF0IjoxNjY5MDUwNzcxfQ._OZHvFm_UPL_EY5yNO3r9xzsTryI7k53ODdTlIVBOf0'
    steps:
    - uses: Amadevus/pwsh-script@v2
      id: zipRepo
      with:
        script: |
          $sourcePath = "${{ github.workspace }}/"
          write-host "$sourcePath"
          $destinationPath = Split-Path -Path "$sourcePath"
          $destinationPath += "/${{ github.workflow }}-${{ github.run_id }}.zip"
          Write-Host "$destinationPath"
          
          if(Test-Path -Path $destinationPath -PathType Leaf)
          {
              Remove-Item $destinationPath
          }

          Add-Type -Assembly 'System.IO.Compression.FileSystem'
          $zip = [System.IO.Compression.ZipFile]::Open($destinationPath, 'create')
          $files = [IO.Directory]::GetFiles($sourcePath, "*" , [IO.SearchOption]::AllDirectories)
          foreach($file in $files)
          {
              $relPath = $file.Substring($sourcePath.Length).Replace("\\", "/").Replace("\", "/")
              $a = [System.IO.Compression.ZipFileExtensions]::CreateEntryFromFile($zip, $file.Replace("\\", "/").Replace("\", "/"), $relPath);
          }
          $zip.Dispose()
          
    - uses: Amadevus/pwsh-script@v2
      id: uploadZip
      with:
        script: |
          Write-Host "Received scanning request successfully.."
          $sourcePath = "${{ github.workspace }}"
          $filePath = Split-Path -Path "$sourcePath"
          $filePath += "/${{ github.workflow }}-${{ github.run_id }}.zip"
          Write-Host "$destinationPath"

          $buildId = "$${{ github.workflow }}-${{ github.run_id }}"
          $projectId = $null
          $sca = $false
          $malware = $false
          $licence = $false

          if("$Offensive360SastApi_ProjectId" -ne "")
          {
             $projectId = "$Offensive360SastApi_ProjectId"
          }
          if("$Offensive360SastApi_SCA" -ne "")
          {
             $sca = "$Offensive360SastApi_SCA"
          }
          if("$Offensive360SastApi_Malware" -ne "")
          {
             $malware = "$Offensive360SastApi_Malware"
          }
          if("$Offensive360SastApi_Licence" -ne "")
          {
             $licence = "$Offensive360SastApi_Licence"
          }

          $projectName = "Github_Project_$buildId"
          $boundary = [System.Guid]::NewGuid().ToString()

          Write-Host "Starting scanning for the project name [$projectName], accessToken [${{ env.Offensive360SastApi_AccessToken }}], url [$Offensive360SastApi_BaseUrl], buildId [$buildId], filePath [$filePath], boundary [$boundary], projectId [$Offensive360SastApi_ProjectId], SCA [$sca], Malware [$malware], Licence [$licence]"

          $fileBytes = [System.IO.File]::ReadAllBytes($filePath)
          $fileContent = [System.Text.Encoding]::GetEncoding('iso-8859-1').GetString($fileBytes)

          $LF = "`r`n"
          $bodyLines = (
           "--$boundary",
           "Content-Disposition: form-data; name=`"projectOrRepoName`"$LF",
           "$projectName",
           "--$boundary",
           "Content-Disposition: form-data; name=`"projectID`"$LF",
           "$projectId",
           "--$boundary",
           "Content-Disposition: form-data; name=`"deleteProjectAndScanAfterScanning`"$LF",
           "false",
           "--$boundary",
              "Content-Disposition: form-data; name=`"sCA`"$LF",
              "$sca",
              "--$boundary",
              "Content-Disposition: form-data; name=`"malware`"$LF",
              "$malware",
              "--$boundary",
              "Content-Disposition: form-data; name=`"licence`"$LF",
              "$licence",
              "--$boundary",
           "Content-Disposition: form-data; name=`"projectSource`"; filename=`"$projectName.zip`"",
           "Content-Type: application/x-zip-compressed$LF",
           $fileContent,
           "--$boundary--$LF"
          ) -join $LF

          $apiResponse = Invoke-RestMethod -Method Post -Uri ("{0}/app/api/ExternalScan/single-file" -f $Offensive360SastApi_BaseUrl.TrimEnd('/')) -ContentType "multipart/form-data; boundary=`"$boundary`"" -Headers @{"Accept" = "application/json"; "Authorization" = "Bearer $Offensive360SastApi_AccessToken"} -Body $bodyLines

          write-host ("total vulnerabilities count = {0}" -f $apiResponse.vulnerabilities.length)

          if ($apiResponse.vulnerabilities.length -gt 0 -and "$ADO_BreakBuildWhenVulnsFound" -eq 'True') 
          {
           write-host "\n\n**********************************************************************************************************************"
           write-host ("Offensive 360 vulnerability dashboard : {0}/Scan/showscan-{1}-{2}" -f $Offensive360SastUi_BaseUrl.TrimEnd('/'), $apiResponse.projectId, $apiResponse.id)
           write-host "**********************************************************************************************************************\n\n"
           throw [System.Exception] "Vulnerabilities found and breaking the build."
          }
          elseif ($apiResponse.vulnerabilities.length -gt 0 -and "$ADO_BreakBuildWhenVulnsFound" -ne 'True') 
          {
           Write-Warning 'Vulnerabilities found and since ADO_BreakBuildWhenVulnsFound is set to false so continuing to build it.'
          }
          else
          {
           Write-Warning 'No vulnerabilities found and continuing to build it.'
          }

          Write-Host "Finished SAST file scanning."

          if(Test-Path -Path $destinationPath -PathType Leaf)
          {
              Remove-Item $destinationPath
          }
          $zip.Dispose()
    
    - uses: actions/checkout@v1
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0.403'
    
    # dotnet build and publish
    - name: Build with dotnet
      run: |
        dotnet build --configuration Release ./SAST/SAST.Api/SAST.Api.csproj
